# finding the best model

from sklearn.datasets import fetch_california_housing
import sklearn as sk
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import metrics
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn.preprocessing import StandardScaler, PolynomialFeatures
from sklearn.datasets import load_boston
import math
df = pd.read_csv("data.csv")

boston = load_boston()

house_price_dataset = fetch_california_housing()
house_price_panda = fetch_california_housing(as_frame =True)

X = df.drop(['index', 'title', 'sqft', 'type', 'bedrooms', 'final_price','parking', 'description', 'mls', 'full_link', 'full_address', 'final_price_transformed', 'city_district', 'final_price_log'], axis=1)
Y = df['final_price']

total_RSE = []
total_MAE = []
rate = []

poly = PolynomialFeatures(degree=1, include_bias=False)
scaler_linear = StandardScaler()

x_train, x_2, y_train, y_2 = train_test_split(X, Y, test_size=0.4, random_state = 3)
x_cv, x_test, y_cv, y_test = train_test_split(x_2, y_2, test_size=0.5, random_state = 3)

for i in np.arange(1, 2):
    model = XGBRegressor(learning_rate=0.14, max_depth=6, n_estimators=i)
    rate.append(i)
    x_train_mapped = poly.fit_transform(x_train)
    x_train_scaled_mapped = scaler_linear.fit_transform(x_train_mapped)

    model.fit(x_train_scaled_mapped, y_train)

    train_result = model.predict(x_train_scaled_mapped)

    score_1 = metrics.r2_score(y_train, train_result)
    score_2 = metrics.mean_absolute_error(y_train, train_result)

    x_cv_mapped = poly.fit_transform(x_cv)
    x_cv_scaled_mapped = scaler_linear.transform(x_cv_mapped)

    cv_result = model.predict(x_cv_scaled_mapped)

    score_1 = metrics.r2_score(y_cv, cv_result)
    score_2 = metrics.mean_absolute_error(y_cv, cv_result)

    x_test_mapped = poly.fit_transform(x_test)
    x_test_scaled_mapped = scaler_linear.transform(x_test_mapped)

    test_result = model.predict(x_test_scaled_mapped)

    score_1 = abs(metrics.r2_score(y_test, test_result))
    score_2 = abs(metrics.mean_absolute_error(y_test, test_result))

    total_RSE.append(score_1)
    total_MAE.append(score_2)

total_RSEnp = np.array((total_RSE))
total_MAEnp = np.array((total_MAE))

print(total_RSEnp.argmax())
print(total_MAEnp.argmin())

total = total_MAEnp + total_RSEnp
print(total.argmin())


plt.scatter(rate, total_RSE)
plt.xlabel("X")
plt.ylabel("RSE")
plt.title("RSE score")
plt.show()

plt.scatter(rate, total_MAE)
plt.xlabel("X")
plt.ylabel("MAE")
plt.title("MAE score")
plt.show()

plt.scatter(rate, total)
plt.xlabel("X")
plt.ylabel("Total")
plt.title("Total score")
plt.show()

